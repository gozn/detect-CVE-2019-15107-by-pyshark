#n18dcat093
import csv
import logging
import pyshark
from datetime import datetime
import logging
import re as r
import psutil
import sys
import os
from urllib.parse import unquote
import signal
import time
 
def handler(signum, frame):
    pass

signal.signal(signal.SIGINT, handler)

LOG_LEVEL = logging.DEBUG
# LOGFORMAT = "%(log_color)s%(levelname)-8s%(reset)s | %(log_color)s%(message)s%(reset)s"
LOGFORMAT = "%(asctime)s - %(log_color)s%(levelname)-8s%(reset)s | %(log_color)s%(message)s%(reset)s"
from colorlog import ColoredFormatter
logging.root.setLevel(LOG_LEVEL)
# formatter = ColoredFormatter(LOGFORMAT)
formatter = ColoredFormatter(LOGFORMAT , "%Y-%m-%d %H:%M:%S")
stream = logging.StreamHandler()
stream.setLevel(LOG_LEVEL)
stream.setFormatter(formatter)

log = logging.getLogger('pythonConfig')
log.setLevel(LOG_LEVEL)
log.addHandler(stream)

file = open('aa.txt', 'r')
line = file.read()
line = line.split()

def checkIP(command):
    aa = r.findall(r'(\d+\.\d+\.\d+\.\d+)', command)
    if aa is not None:
        return True
    return False

def checkUnixCommand(command):
    commands = command.split()
    if any(word in commands for word in line):
        return True
    return False

def hexToText(payload):
    payload = payload.replace(':', '')
    hex = bytes.fromhex(payload).decode('utf-8')
    return hex

def getCommand(payload):
    sub = r.search('old=', payload)
    sub2 = r.search('&new1=', payload)
    command = payload[sub.start()+4:]
    if '&new1' in command:
        command = payload[sub.start()+4:sub2.start()]
        return command
    return command

def checkPayload(payload):
    words = ['6f:6c:64:3d']
    if all(word in payload for word in words):
        return True
    return False

now = datetime.now()
addrs = psutil.net_if_addrs()
list = list(addrs.keys())
def capture():
    capture = pyshark.LiveCapture('VMware Network Adapter VMnet8', use_json=True, include_raw=False, debug=True)
    for packet in capture:
        if 'http' in packet:
            layer = packet.transport_layer
            ipsrc = packet.ip.src
            srcport = packet[packet.transport_layer].srcport
            ipdest =  packet.ip.dst
            dstport = packet[packet.transport_layer].dstport
            time = packet.sniff_time
            payload = ''
            repayload = ''
            try:
                payload = packet.tcp.payload
                repayload = hexToText(payload)
            except Exception as e:
                payload = ''

            f = open('final.csv', 'a')
            writer = csv.writer(f)
            row = [layer, ipsrc, srcport, ipdest, dstport, time, repayload]
            writer.writerow(row)
            # print("Có HTTP")
            try:
                if checkPayload(packet.tcp.payload):
                    a = hexToText(packet.tcp.payload)
                    a = unquote(getCommand(a))
                    if checkIP(a) or checkUnixCommand(a):
                        log.warning('Phát hiện tấn công CVE 2019-15107')
                        log.critical('Thực hiện bởi địa chỉ ip: ' + packet.ip.src)
                        log.critical('Lệnh thực thi: ' + unquote(a))
                        logz = 'Phát hiện tấn công CVE 2019-15107' + '\n' + 'Thực hiện bởi địa chỉ ip: ' + packet.ip.src + '\n' + 'Lệnh thực thi: ' + unquote(a)
                        with open('logs.txt', 'a') as logFile:
                            logFile.write(now.strftime("%d-%b-%Y (%H:%M:%S.%f)")+ '\n')
                            logFile.write(logz)
                            logFile.write('\n')
                    else: 
                        log.info('scanning...')
            except Exception as err:
                print('')
        else:
            log.info("scanning...")
capture()
print("Kết thúc bắt gói tin")
